import argparse

import openai

MODEL = 'gpt-3.5-turbo'
parser = argparse.ArgumentParser()

def handleRequest(option: int):
    if option == 1:
        chatCompletion()
    else:
        completion()


def split_logit_bias(logit_bias: str):
    dictionary = {}
    if logit_bias:
        array = logit_bias.strip().split(',')
        for item in array:
            items = item.split(":")
            dictionary[items[0]] = int(items[1])

    return dictionary


def chatCompletion():
    logit_biases = split_logit_bias(args.logit_bias)

    loop = True
    while loop:
        prompt = input("\nEnter prompt (#q to quit): ")
        if prompt == '#q':
            loop = not loop
            continue

        responses = openai.ChatCompletion.create(
            model=MODEL,
            max_tokens=args.max_tokens,
            temperature=args.temperature,
            top_p=args.top_p,
            n=args.n,
            stream=args.stream,
            presence_penalty=args.presence_penalty,
            frequency_penalty=args.frequency_penalty,
            logit_bias=logit_biases,
            messages=[{'role': 'user', 'content': prompt}]
        )

        if args.stream:
            print("stream is on. reading through iteration ...")
            _str = ""
            for response in responses:
                if 'content' in response['choices'][0]['delta']:
                    _str += response['choices'][0]['delta']['content']
                    print(_str)
        else:
            print(responses)


def completion():
    pass


if __name__ == "__main__":
    parser.add_argument("--api_key", help="API key generated by OpenAI", type=str, default=None, nargs='?')
    parser.add_argument("--max_tokens", help="max tokens", type=int, default=5, nargs='?')
    parser.add_argument("--temperature", help="temperature", type=float, default=1.0, nargs='?')
    parser.add_argument("--top_p", help="top probability mass", type=float, default=1.0, nargs='?')
    parser.add_argument("--n", help="number of outputs", type=int, default=1, nargs='?')
    parser.add_argument("--stream", help="stream or not", type=bool, default=False, nargs='?')
    parser.add_argument("--presence_penalty", help="Presence penalty", type=float, default=0, nargs='?')
    parser.add_argument("--frequency_penalty", help="Frequency penalty", type=float, default=0, nargs='?')
    parser.add_argument("--logit_bias", help="Logit bias", type=str, default=None, nargs='?')
    args = parser.parse_args()

    if args.api_key:
        val = args.api_key
        print(f'API key received')
        openai.api_key = args.api_key
    else:
        api_key = input("Enter API key: ")
        openai.api_key = api_key
        print(f'API key was initialized. value: {api_key}')

    while True:
        print("\n1. Chat Completion")
        print("2. Completion")

        val = int(input("\nEnter an option: "))

        if val != 1 and val != 2:
            continue

        handleRequest(val)
