import argparse

import openai

COMPLETION_MODEL = 'text-davinci-003'
CHAT_COMPLETION_MODEL = 'gpt-3.5-turbo'
conversations = list()


class Message:
    def __init__(self, role, msg):
        self.role = role
        self.message = msg

    def __str__(self):
        return self.role + ': ' + self.message


def str2bool(v):
    if isinstance(v, bool):
        return v
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')


def split_logit_bias(logit_bias: str):
    dictionary = {}
    if logit_bias:
        array = logit_bias.strip().split(',')
        for item in array:
            items = item.split(":")
            dictionary[items[0]] = int(items[1])

    return dictionary


def list_models():
    return openai.Model.list()


def iterate_responses(responses, mode):
    _str = ""
    for response in responses:
        if mode == 'chat_completion':
            if 'delta' in response['choices'][0] and 'content' in response['choices'][0]['delta']:
                _str += response['choices'][0]['delta']['content']
                yield _str.strip()
        elif mode == 'completion':
            if 'text' in response['choices'][0]:
                _str += response['choices'][0]['text']
                yield _str.strip()


def handle_conversation(response, mode):
    if args.stream:
        print("stream is ON. reading through iteration...")

        complete_response = ""
        for resp in iterate_responses(response, mode):
            print(resp)
            complete_response = resp

        conversations.append(Message("administrator", complete_response))
    else:
        for choice in response['choices']:
            conversations.append(Message("administrator",
                                         choice['message']['content'].strip() if mode == 'chat_completion'
                                         else choice['text'].strip()))
        print(response)


def chatCompletion():
    logit_biases = split_logit_bias(args.logit_bias)

    while True:
        print("\n-------------------------\n")
        prompt = input("Enter prompt (#q to quit): ")
        if prompt == '#q':
            break

        response = openai.ChatCompletion.create(
            model=CHAT_COMPLETION_MODEL,
            max_tokens=args.max_tokens,
            temperature=args.temperature,
            top_p=args.top_p,
            n=args.n,
            stream=args.stream,
            presence_penalty=args.presence_penalty,
            frequency_penalty=args.frequency_penalty,
            logit_bias=logit_biases,
            messages=[{'role': 'user', 'content': prompt}]
        )

        conversations.append(Message("user", prompt))
        handle_conversation(response, 'chat_completion')


def completion():
    logit_biases = split_logit_bias(args.logit_bias)

    while True:
        print("\n-------------------------\n")
        prompt = input("Enter prompt (#q to quit): ")
        if prompt == '#q':
            break

        response = openai.Completion.create(
            model=COMPLETION_MODEL,
            suffix=args.suffix,
            max_tokens=args.max_tokens,
            temperature=args.temperature,
            top_p=args.top_p,
            n=args.n,
            stream=args.stream,
            logprobs=args.log_probs,
            echo=args.echo,
            stop=args.stop,
            presence_penalty=args.presence_penalty,
            frequency_penalty=args.frequency_penalty,
            best_of=args.best_of,
            logit_bias=logit_biases,
            prompt=prompt
        )

        conversations.append(Message("user", prompt))
        handle_conversation(response, 'completion')


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("--api_key", help="API key generated by OpenAI", type=str)
    parser.add_argument("--max_tokens", help="max_tokens parameter", type=int, default=5, nargs='?')
    parser.add_argument("--temperature", help="temperature parameter", type=float, default=1.0, nargs='?')
    parser.add_argument("--top_p", help="top_p parameter", type=float, default=1.0, nargs='?')
    parser.add_argument("--n", help="n parameter", type=int, default=1, nargs='?')
    parser.add_argument("--stream", help="stream parameter", type=str2bool, const=True, default=False, nargs='?')
    parser.add_argument("--presence_penalty", help="presence_penalty parameter", type=float, default=0, nargs='?')
    parser.add_argument("--frequency_penalty", help="frequency_penalty parameter", type=float, default=0, nargs='?')
    parser.add_argument("--logit_bias", help="logit_bias parameter", type=str, default=None, nargs='?')
    parser.add_argument("--suffix", help="suffix parameter", type=str, default=None, nargs='?')
    parser.add_argument("--log_probs", help="logprobs parameter", type=int, default=None, nargs='?')
    parser.add_argument("--echo", help="echo parameter", type=str2bool, const=True, default=False, nargs='?')
    parser.add_argument("--stop", help="stop parameter", type=str, default=None, nargs='?')
    parser.add_argument("--best_of", help="best_of parameter", type=int, default=1, nargs='?')
    args = parser.parse_args()

    if not args.api_key:
        print("Please provide api_key first")
        exit(0)

    openai.api_key = args.api_key

    print("\n============ BEGINNING ============\n")
    while True:
        print("1. Chat Completion")
        print("2. Completion")
        print("3. Models")
        print("4. Conversation history")
        print("5. Exit")
        print("")

        option = input("Enter an option: ")

        if not option.strip().isdigit():
            print("Wrong input format!")
            continue

        option = int(option)

        if option == 1:
            chatCompletion()
        elif option == 2:
            completion()
        elif option == 3:
            models = list_models()
            print(f"{len(models['data'])} models were found! Here's the list: ")
            print(models['data'])
        elif option == 4:
            print("Conversation history is :")
            for message in conversations:
                print(message)
        elif option == 5:
            exit(0)
        else:
            print("Wrong input!")

        print("")
    print("\n============ THE END ============\n")