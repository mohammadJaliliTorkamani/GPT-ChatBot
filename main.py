import argparse

import openai

COMPLETION_MODEL = 'text-davinci-003'
CHAT_COMPLETION_MODEL = 'gpt-3.5-turbo'


def split_logit_bias(logit_bias: str):
    dictionary = {}
    if logit_bias:
        array = logit_bias.strip().split(',')
        for item in array:
            items = item.split(":")
            dictionary[items[0]] = int(items[1])

    return dictionary


def iterate_responses(responses):
    for response in responses:
        yield response['choices'][0]['text']


def chatCompletion():
    logit_biases = split_logit_bias(args.logit_bias)

    while True:
        prompt = input("\nEnter prompt (#q to quit): ")
        if prompt == '#q':
            break

        response = openai.ChatCompletion.create(
            model=CHAT_COMPLETION_MODEL,
            max_tokens=args.max_tokens,
            temperature=args.temperature,
            top_p=args.top_p,
            n=args.n,
            stream=args.stream,
            presence_penalty=args.presence_penalty,
            frequency_penalty=args.frequency_penalty,
            logit_bias=logit_biases,
            messages=[{'role': 'user', 'content': prompt}]
        )

        if args.stream:
            print("stream is on. reading through iteration ...")
            _str = ""
            for resp in iterate_responses(response):
                _str += resp
                print(_str.strip())
        else:
            print(response)


def completion():
    logit_biases = split_logit_bias(args.logit_bias)

    while True:
        prompt = input("\nEnter prompt (#q to quit): ")
        if prompt == '#q':
            break

        response = openai.Completion.create(
            model=COMPLETION_MODEL,
            suffix=args.suffix,
            max_tokens=args.max_tokens,
            temperature=args.temperature,
            top_p=args.top_p,
            n=args.n,
            stream=args.stream,
            logprobs=args.log_probs,
            echo=args.echo,
            stop=args.stop,
            presence_penalty=args.presence_penalty,
            frequency_penalty=args.frequency_penalty,
            best_of=args.best_of,
            logit_bias=logit_biases,
            prompt=prompt
        )

        if args.stream:
            print("stream is on. reading through iteration ...")
            _str = ""
            for resp in iterate_responses(response):
                _str += resp
                print(_str)
        else:
            print(response)


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("--api_key", help="API key generated by OpenAI", type=str, default=None, nargs='?')
    parser.add_argument("--max_tokens", help="max_tokens parameter", type=int, default=5, nargs='?')
    parser.add_argument("--temperature", help="temperature parameter", type=float, default=1.0, nargs='?')
    parser.add_argument("--top_p", help="top_p parameter", type=float, default=1.0, nargs='?')
    parser.add_argument("--n", help="n parameter", type=int, default=1, nargs='?')
    parser.add_argument("--stream", help="stream parameter", type=bool, default=False, nargs='?')
    parser.add_argument("--presence_penalty", help="presence_penalty parameter", type=float, default=0, nargs='?')
    parser.add_argument("--frequency_penalty", help="frequency_penalty parameter", type=float, default=0, nargs='?')
    parser.add_argument("--logit_bias", help="logit_bias parameter", type=str, default=None, nargs='?')
    parser.add_argument("--suffix", help="suffix parameter", type=str, default=None, nargs='?')
    parser.add_argument("--log_probs", help="logprobs parameter", type=int, default=None, nargs='?')
    parser.add_argument("--echo", help="echo parameter", type=bool, default=False, nargs='?')
    parser.add_argument("--stop", help="stop parameter", type=str, default=None, nargs='?')
    parser.add_argument("--best_of", help="best_of parameter", type=int, default=1, nargs='?')
    args = parser.parse_args()

    if args.api_key:
        print(f'API key received')
        openai.api_key = args.api_key
    else:
        api_key = input("Enter API key: ")
        openai.api_key = api_key

    while True:
        print("\n1. Chat Completion")
        print("2. Completion")

        option = input("\nEnter an option: ")

        if not option.strip().isdigit() or (int(option) != 1 and int(option) != 2):
            continue

        if option == 1:
            chatCompletion()
        else:
            completion()
