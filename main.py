import argparse

import openai

MODEL = 'gpt-3.5-turbo'


def handleRequest(option: int):
    if option == 1:
        chatCompletion()
    else:
        completion()


def split_logit_bias(logit_bias: str):
    dictionary = {}
    if len(logit_bias) > 0:
        array = logit_bias.strip().split(',')
        for item in array:
            items = item.split(":")
            dictionary[items[0]] = int(items[1])

    return dictionary


def chatCompletion():
    _max_tokens = input("\nEnter max_tokens: ")
    max_tokens = int(_max_tokens) if _max_tokens else 5
    _temperature = input("Enter temperature: ")
    temperature = float(_temperature) if _temperature else 1.0
    _top_p = input("Enter top_p: ")
    top_p = float(_top_p) if _top_p else 1.0
    _n = input("Enter n: ")
    n = int(_n) if _n else 1
    _stream = input("Enter stream: ")
    stream = int(_stream) != 0 if _stream else False
    _presence_penalty = input("Enter presence_penalty: ")
    presence_penalty = float(_presence_penalty) if _presence_penalty else 0
    _frequency_penalty = input("Enter frequency: ")
    frequency_penalty = float(_frequency_penalty) if _frequency_penalty else 0
    logit_bias = input("Enter logit_bias (KEY:VAL format seperated by ,): ")

    logit_biases = {}
    logit_biases = split_logit_bias(logit_bias)

    loop = True
    while loop:
        prompt = input("\nEnter prompt (#q to quit): ")
        if prompt == '#q':
            loop = not loop
            continue

        responses = openai.ChatCompletion.create(
            model=MODEL,
            max_tokens=max_tokens,
            temperature=temperature,
            top_p=top_p,
            n=n,
            stream=stream,
            presence_penalty=presence_penalty,
            frequency_penalty=frequency_penalty,
            logit_bias=logit_biases,
            messages=[{'role': 'user', 'content': prompt}]
        )

        if stream:
            print("stream is on. reading through iteration ...")
            _str = ""
            for response in responses:
                if 'content' in response['choices'][0]['delta']:
                    _str += response['choices'][0]['delta']['content']
                    print(_str)
        else:
            print(responses)


def completion():
    pass


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--api_key", help="API key generated by OpenAI", type=str, default=None, nargs='?')
    args = parser.parse_args()

    if args.api_key:
        val = args.api_key
        print(f'API key received. value: {val}')
        openai.api_key = args.api_key
    else:
        api_key = input("Enter API key: ")
        openai.api_key = api_key
        print(f'API key was initialized. value: {api_key}')

    while True:
        print("\n1. Chat Completion")
        print("2. Completion")

        val = int(input("\nEnter an option: "))

        if val != 1 and val != 2:
            continue

        handleRequest(val)
